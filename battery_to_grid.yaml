blueprint:
  name: My Battery Grid to 0
  description: "Adjust battery discharge/charge to balance grid power to 0. Includes configurable SoC and charging power limits."
  domain: automation
  input:
    grid_power_sensor:
      name: Grid Power Sensor
      description: Sensor with positive values for import and negative for export.
      selector:
        entity:
          domain: sensor
    battery_discharge:
      name: Battery Discharge Sensor
      description: Sensor representing battery discharge power (positive = discharging).
      selector:
        entity:
          domain: sensor
    battery_target:
      name: Target Input Number
      description: Input number to set target battery charging/discharging.
      selector:
        entity:
          domain: input_number
    battery_control_script:
      name: Battery Control Script
      description: Script to apply battery charge/discharge changes.
      selector:
        entity:
          domain: script
    battery_soc:
      name: Battery SoC Sensor
      description: Sensor representing battery State of Charge (%).
      selector:
        entity:
          domain: sensor
    max_charge_power:
      name: Max Charge Power Sensor
      description: Sensor representing maximum charge power (default 2500).
      selector:
        entity:
          domain: sensor
    max_discharge_power:
      name: Max Discharge Power Sensor
      description: Sensor representing maximum discharge power (default 800).
      selector:
        entity:
          domain: sensor
    max_soc_charging:
      name: Max SoC Charging
      description: Input number defining maximum allowed SoC for charging (%).
      selector:
        entity:
          domain: input_number
    min_soc_discharging:
      name: Min SoC Discharging
      description: Input number defining minimum allowed SoC for discharging (%).
      selector:
        entity:
          domain: input_number
    min_charging:
      name: Min Charging Power
      description: Input number defining minimum charging power (positive W).
      selector:
        entity:
          domain: input_number
    max_charging:
      name: Max Charging Power
      description: Input number defining maximum charging power (positive W).
      selector:
        entity:
          domain: input_number

trigger:
  - platform: time_pattern
    seconds: "/10"

condition: []

action:
  - service: homeassistant.update_entity
    data:
      entity_id:
        - !input grid_power_sensor
        - !input battery_discharge
        - !input battery_soc
        - !input max_charge_power
        - !input max_discharge_power
        - !input max_soc_charging
        - !input min_soc_discharging
        - !input min_charging
        - !input max_charging

  - delay: "00:00:02"

  - variables:
      grid_power_entity: !input grid_power_sensor
      battery_discharge_entity: !input battery_discharge
      battery_soc_entity: !input battery_soc
      max_charge_entity: !input max_charge_power
      max_discharge_entity: !input max_discharge_power
      max_soc_charging_entity: !input max_soc_charging
      min_soc_discharging_entity: !input min_soc_discharging
      min_charging_entity: !input min_charging
      max_charging_entity: !input max_charging

      grid_power_val: >
        {{ states(grid_power_entity) | float(0) }}
      battery_discharge_val: >
        {{ states(battery_discharge_entity) | float(0) }}
      soc: >
        {{ states(battery_soc_entity) | float(100) }}
      max_charge: >
        {{ states(max_charge_entity) | float(2500) }}
      max_discharge: >
        {{ states(max_discharge_entity) | float(800) }}
      max_soc_charging_val: >
        {{ states(max_soc_charging_entity) | float(92) }}
      min_soc_discharging_val: >
        {{ states(min_soc_discharging_entity) | float(14) }}
      min_charging_val: >
        {{ states(min_charging_entity) | float(0) }}
      max_charging_val: >
        {{ states(max_charging_entity) | float(2500) }}

      # Initial target before SoC or power limits
      raw_target: >
        {{ battery_discharge_val - grid_power_val }}

      # Clamp based on SoC
      soc_limited_target: >
        {% if soc <= min_soc_discharging_val %}
          {{ [raw_target, 0] | max }}  {# prevent discharge #}
        {% elif soc >= max_soc_charging_val %}
          {{ [raw_target, 0] | min }}  {# prevent charge #}
        {% else %}
          {{ raw_target }}
        {% endif %}

      # Clamp based on power limits
      power_limited_target: >
        {{ [ [soc_limited_target, max_discharge * -1] | max, max_charge ] | min }}

      # Apply min/max charging logic
      new_battery_target: >
        {% if power_limited_target > 0 %}
          {{ [ [power_limited_target, min_charging_val] | max, max_charging_val ] | min }}
        {% else %}
          {{ power_limited_target }}
        {% endif %}

  - service: input_number.set_value
    data:
      value: "{{ new_battery_target | round(2) }}"
    target:
      entity_id: !input battery_target

  - service: script.turn_on
    target:
      entity_id: !input battery_control_script

mode: single
